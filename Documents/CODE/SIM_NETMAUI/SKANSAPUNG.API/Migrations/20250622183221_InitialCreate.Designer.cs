// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SKANSAPUNG.API.Data;

#nullable disable

namespace SKANSAPUNG.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250622183221_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SKANSAPUNG.API.Models.Assessment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ClassRoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("assessments", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Attendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("EndLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("EndLongitude")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsLeave")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("ScheduleEndTime")
                        .HasColumnType("interval");

                    b.Property<double>("ScheduleLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("ScheduleLongitude")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("ScheduleStartTime")
                        .HasColumnType("interval");

                    b.Property<double>("StartLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("StartLongitude")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("attendances", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.ClassRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HomeroomTeacherId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolYearId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HomeroomTeacherId")
                        .IsUnique();

                    b.HasIndex("SchoolYearId");

                    b.ToTable("class_rooms", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Extracurricular", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Deskripsi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hari")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("JamMulai")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("JamSelesai")
                        .HasColumnType("interval");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Tempat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("extracurriculars", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.FcmToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("fcm_tokens", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.ScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("schedule_items", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.SchoolYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tahun")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("school_years", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Agama")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ClassRoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JenisKelamin")
                        .HasColumnType("integer");

                    b.Property<string>("NamaLengkap")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.StudentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankAccountHolder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BirthCertificateNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ChildOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ClassGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DistanceToSchool")
                        .HasColumnType("numeric");

                    b.Property<string>("Dusun")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FatherBirthYear")
                        .HasColumnType("integer");

                    b.Property<string>("FatherEducation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherIncome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherNik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherOccupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("GuardianBirthYear")
                        .HasColumnType("integer");

                    b.Property<string>("GuardianEducation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuardianIncome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuardianNik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuardianOccupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("HeadCircumference")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric");

                    b.Property<string>("IjazahNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kecamatan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kelurahan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KipName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KipNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("KipRecipient")
                        .HasColumnType("boolean");

                    b.Property<string>("KkNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KksNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KpsNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("KpsRecipient")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11, 8)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MotherBirthYear")
                        .HasColumnType("integer");

                    b.Property<string>("MotherEducation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotherIncome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotherNik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotherOccupation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nik")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nipd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nisn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PipEligible")
                        .HasColumnType("boolean");

                    b.Property<string>("PipEligibleReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousSchool")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResidenceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rw")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SiblingsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Skhun")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecialNeeds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Transportation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("student_details", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.StudentScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("student_scores", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClassRoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RememberToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Assessment", b =>
                {
                    b.HasOne("SKANSAPUNG.API.Models.ClassRoom", "ClassRoom")
                        .WithMany("Assessments")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKANSAPUNG.API.Models.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Attendance", b =>
                {
                    b.HasOne("SKANSAPUNG.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.ClassRoom", b =>
                {
                    b.HasOne("SKANSAPUNG.API.Models.Department", "Department")
                        .WithMany("ClassRooms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKANSAPUNG.API.Models.User", "HomeroomTeacher")
                        .WithOne()
                        .HasForeignKey("SKANSAPUNG.API.Models.ClassRoom", "HomeroomTeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SKANSAPUNG.API.Models.SchoolYear", "SchoolYear")
                        .WithMany("ClassRooms")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("HomeroomTeacher");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Student", b =>
                {
                    b.HasOne("SKANSAPUNG.API.Models.ClassRoom", "ClassRoom")
                        .WithMany("Students")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKANSAPUNG.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ClassRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.StudentDetail", b =>
                {
                    b.HasOne("SKANSAPUNG.API.Models.User", "User")
                        .WithOne("StudentDetail")
                        .HasForeignKey("SKANSAPUNG.API.Models.StudentDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.StudentScore", b =>
                {
                    b.HasOne("SKANSAPUNG.API.Models.Assessment", "Assessment")
                        .WithMany("StudentScores")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKANSAPUNG.API.Models.Student", "Student")
                        .WithMany("Scores")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.User", b =>
                {
                    b.HasOne("SKANSAPUNG.API.Models.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId");

                    b.Navigation("ClassRoom");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Assessment", b =>
                {
                    b.Navigation("StudentScores");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.ClassRoom", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Department", b =>
                {
                    b.Navigation("ClassRooms");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.SchoolYear", b =>
                {
                    b.Navigation("ClassRooms");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.Student", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("SKANSAPUNG.API.Models.User", b =>
                {
                    b.Navigation("StudentDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
